name: Deploy to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test --if-present
      
    - name: Build application
      run: npm run build
      
    - name: Build Docker image
      run: |
        docker build -t football-tournaments:${{ github.sha }} .
        docker build -t football-tournaments-prod:${{ github.sha }} .
        docker build -t football-tournaments-dev:${{ github.sha }} .
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push images to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: football-tournaments
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Create ECR repository if it doesn't exist
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY || aws ecr create-repository --repository-name $ECR_REPOSITORY
        
        # Build and push production image
        docker tag football-tournaments-prod:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY-prod:$IMAGE_TAG
        docker tag football-tournaments-prod:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY-prod:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-prod:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-prod:latest
        
        # Build and push development image
        docker tag football-tournaments-dev:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY-dev:$IMAGE_TAG
        docker tag football-tournaments-dev:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY-dev:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-dev:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY-dev:latest
        
    - name: Deploy to EC2 (Production)
      if: github.ref == 'refs/heads/main'
      run: |
        # Get EC2 instance IP
        PROD_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=football-tournaments-prod" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].PublicIpAddress" \
          --output text)
        
        if [ "$PROD_IP" != "None" ] && [ -n "$PROD_IP" ]; then
          # Deploy to production EC2
          ssh -o StrictHostKeyChecking=no ec2-user@$PROD_IP << 'EOF'
            cd /home/ec2-user/football-tournaments-prod
            docker-compose down
            docker-compose pull
            docker-compose up -d
          EOF
        fi
        
    - name: Deploy to EC2 (Development)
      if: github.ref == 'refs/heads/main'
      run: |
        # Get EC2 instance IP
        DEV_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=football-tournaments-dev" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].PublicIpAddress" \
          --output text)
        
        if [ "$DEV_IP" != "None" ] && [ -n "$DEV_IP" ]; then
          # Deploy to development EC2
          ssh -o StrictHostKeyChecking=no ec2-user@$DEV_IP << 'EOF'
            cd /home/ec2-user/football-tournaments-dev
            docker-compose down
            docker-compose pull
            docker-compose up -d
          EOF
        fi
